{"version":3,"sources":["images/sun.jpg","logo.svg","components/Navbar/NavbarItem.js","components/Navbar/Navbar.js","components/SobreMim/SobreMim.js","components/Habilidades/Habilidade.js","components/Habilidades/Habilidades.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavbarItem","className","this","props","title","React","Component","Navbar","SobreMim","src","minhaFoto","Habilidade","name","style","flex","porcentagem","Habilidades","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,iC,uECA3CD,EAAOC,QAAU,IAA0B,kC,mKCY5BC,G,sLAPP,OACI,yBAAKC,UAAW,eACZ,4BAAKC,KAAKC,MAAMC,Y,GAJPC,IAAMC,YCahBC,E,iLAVP,OACI,yBAAKN,UAAY,UACb,kBAAC,EAAD,CAAYG,MAAO,cACnB,kBAAC,EAAD,CAAYA,MAAO,eACnB,kBAAC,EAAD,CAAYA,MAAO,aACnB,kBAAC,EAAD,CAAYA,MAAO,iB,GAPdC,IAAMC,W,yBCoBZE,E,iLAlBP,OAEI,yBAAKP,UAAU,uBACX,yBAAKA,UAAY,kBACb,yBAAKQ,IAAKC,IAAWT,UAAY,iBAGrC,6BACI,yQ,GAVGI,IAAMC,W,SC0BdK,E,iLArBP,OACI,yBAAKV,UAAU,wBAEX,yBAAKA,UAAU,qBAAqBC,KAAKC,MAAMS,MAG/C,yBAAKX,UAAU,sBAGX,yBACIA,UAAU,wBACVY,MAAS,CAACC,KAAMZ,KAAKC,MAAMY,eAG/B,yBAAKF,MAAS,CAACC,KAAM,IAAMZ,KAAKC,MAAMY,qB,GAhBjCV,IAAMC,WCQhBU,E,iLATP,OACI,yBAAKf,UAAU,yBACX,kBAAC,EAAD,CAAYc,YAAe,EAAGH,KAAO,UACrC,kBAAC,EAAD,CAAYG,YAAe,GAAIH,KAAO,WACtC,kBAAC,EAAD,CAAYG,YAAe,GAAIH,KAAO,W,GAN5BP,IAAMC,WCgBjBW,MAbf,WACE,OAEE,yBAAKhB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SCFYiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.290b40ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.affed258.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React from 'react';\r\nimport \"./navbar.css\";\r\n\r\nclass NavbarItem extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className= \"navbar-item\">\r\n                <h3>{this.props.title}</h3>\r\n            </div>\r\n        )\r\n    } \r\n}\r\nexport default NavbarItem;","import React from 'react';\r\nimport NavbarItem from \"./NavbarItem\";\r\nimport \"./navbar.css\";\r\n\r\nclass Navbar extends React.Component{\r\n    render(){\r\n        return (\r\n            <div className = \"navbar\">\r\n                <NavbarItem title= \"Sobre mim\" />\r\n                <NavbarItem title= \"Habiidades\" />\r\n                <NavbarItem title= \"Projetos\" />\r\n                <NavbarItem title= \"Contato\" />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Navbar;","import React from 'react';\r\nimport \"./sobreMim.css\";\r\nimport minhaFoto from '../../images/sun.jpg'\r\n\r\nclass SobreMim extends React.Component{\r\n    render(){\r\n        return (\r\n\r\n            <div className='sobre-mim-container'>\r\n                <div className = \"foto-container\">  \r\n                    <img src={minhaFoto} className = \"foto-perfil\"></img>\r\n                 </div>\r\n\r\n                <div>\r\n                    <p>\r\n                    O Sol é a estrela central do Sistema Solar. Todos os outros corpos do Sistema Solar, \r\n                    como planetas, planetas anões, asteroides, cometas e poeira, bem como todos os satélites \r\n                    associados a estes corpos, giram ao seu redor\r\n                    </p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default SobreMim;","import React from 'react'\r\nimport \"./habilidades.css\"\r\n\r\nfunction Nivel(){\r\n    return \r\n}\r\n\r\nclass Habilidade extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"habilidade-container\">\r\n                {/* Nome da habilidade*/}\r\n                <div className=\"margem-habilidade\">{this.props.name}</div>\r\n\r\n                {/* A Barrinha */}\r\n                <div className=\"barrinha-container\"> \r\n\r\n                    {/* Parte preenchida */}\r\n                    <div \r\n                        className=\"preechimento-barrinha\"\r\n                        style = {{flex: this.props.porcentagem }}\r\n                    />\r\n                    {/* Parte restante*/}\r\n                    <div style = {{flex: 100 - this.props.porcentagem}}/>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Habilidade;","import React from 'react'\r\nimport Habilidade from \"./Habilidade\"\r\nimport \"./habilidades.css\"\r\n\r\nclass Habilidades extends React.Component{\r\n    render(){\r\n        return(\r\n            <div className=\"habilidades-container\">\r\n                <Habilidade porcentagem = {5} name = 'React'/>\r\n                <Habilidade porcentagem = {50} name = 'Python'/>\r\n                <Habilidade porcentagem = {10} name = 'C'/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Habilidades;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar/Navbar.js';\nimport SobreMim from './components/SobreMim/SobreMim.js'\nimport Habilidades from './components/Habilidades/Habilidades.js'\n\nfunction App() {\n  return (\n\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Navbar></Navbar>\n        <SobreMim></SobreMim>\n        <Habilidades></Habilidades>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}